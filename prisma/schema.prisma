// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider =  "postgresql"
  url      = env("DATABASE_URL")
}

enum EventCategory {
  MUSIC
  TECH
  SPORT
}

enum HoldStatus {
  ACTIVE
  EXPIRED
  CONVERTED
}

enum Name {
  VIP
  REGULAR
  STUDENT
  VVIP
}

enum OrderCategory {
  TICKET
  MERCH
}

enum Role {
  ADMIN
  ORGANIZER
  AUDIENCE
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  SOLD
}

enum Status {
  PENDING
  SUCCESSFUL
  FAILED
}

model Admin {
  id       String  @id @default(uuid())
  username String
  fullname String?
  role     Role    @default(ADMIN)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String  @unique
}

model Audience {
  id       String   @id @default(uuid())
  username String
  fullname String?
  role     Role     @default(AUDIENCE)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String   @unique
}

model Event {
  id          String        @id @default(uuid())
  title       String
  description String
  category    EventCategory
  organizerId String
  organizer   Organizer     @relation(fields: [organizerId], references: [id])
  startTime   DateTime
  ticketType  TicketType[]
  ticket      Ticket[]
  endTime     DateTime
  venueId     String
  venue       Venue         @relation(fields: [venueId], references: [id])
}

model GeoData {
  id       String @id @default(uuid())
  userId   String @unique
  country  String
  region   String
  timezone String
  city     String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Hold {
  id        String     @id @default(uuid())
  eventId   String
  userId    String
  status    HoldStatus @default(ACTIVE)
  expiresAt DateTime
}

model Order {
  id        String        @id @default(uuid())
  item      OrderCategory
  total     Int
  itemId    String[]
  paymentId String        @unique
  payment   Payment       @relation(fields: [paymentId], references: [id])
}

model Organizer {
  id       String             @id @default(uuid())
  username String?
  fullname String?
  venue    OrganizerOnVenue[]
  event    Event[]
  role     Role?              @default(ORGANIZER)
  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String             @unique
}

model OrganizerOnVenue {
  venueId     String
  venue       Venue     @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizerId String
  organizer   Organizer @relation(fields: [organizerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignedAt  DateTime  @default(now())

  @@id([venueId, organizerId])
}

model Payment {
  id     String   @id @default(uuid())
  amount Int
  userId String
  user   User     @relation(fields: [userId], references: [id])
  order  Order?
  status Status   @default(PENDING)
  paidAt DateTime @default(now())
}

model Seat {
  id            String     @id @default(uuid())
  seatNo        Int
  eventId       String
  status        SeatStatus @default(AVAILABLE)
  typeId        String
  row           String?
  column        String?
  holdId        String?
  holdExpiresAt DateTime?

  @@unique([seatNo, eventId])
  @@index([eventId, status])
  @@index([holdId])
}

model Session {
  id            String   @id @default(uuid())
  userId        String
  rememberToken String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Ticket {
  id         String     @id @default(uuid())
  eventId    String
  type       TicketType @relation(fields: [typeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  qrcode     String?
  seatId     String
  seatNo     Int
  isUsed     Boolean    @default(false)
  typeId     String
  event      Event      @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String     
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model TicketType {
  id      String   @id @default(uuid())
  event   Event    @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name    Name
  price   Int
  qty     Int      @default(0)
  ticket  Ticket[]
  eventId String

  @@unique([name, eventId])
}

model TypeInventory {
  id       String @id @default(uuid())
  typeId   String
  reserved Int
  sold     Int
}

model User {
  id                String     @id @default(uuid())
  email             String     @unique
  password          String
  provider          String     @default("")
  emailVerified     Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  twofaVerified     Boolean    @default(false)
  verificationToken String?
  speakeasySecret   String?
  lastLoginIp       String?
  lastKnownDevice   String?
  sessions          Session[]
  payment           Payment[]
  ticket   Ticket[]
  geoData           GeoData?
  organizer         Organizer?
  admin             Admin?
  audience          Audience?
}

model Venue {
  id        String             @id @default(uuid())
  name      String
  address   String
  city      String
  state     String
  country   String
  organizer OrganizerOnVenue[]
  event     Event[]
  capacity  Int
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

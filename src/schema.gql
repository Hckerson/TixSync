# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Admin {
  fullname: String
  id: ID
  role: Role
  user: User!
  userId: String
  username: String
}

type Audience {
  fullname: String
  id: ID
  role: Role
  ticket: [Ticket!]!
  user: User!
  userId: String
  username: String
}

input CreateAdminInput {
  email: String
  fullname: String
  password: String
  role: Role!
  userId: String
  username: String!
}

input CreateAudienceInput {
  email: String!
  fullname: String
  password: String!
  role: Role!
  userId: ID
  username: String!
}

input CreateEventInput {
  category: EventCategory!
  description: String!
  endTime: DateTime!
  organizer: CreateOrganizerInput
  organizerId: String
  startTime: DateTime!
  ticket: [CreateTicketInput!]
  ticketType: [CreateTickettypeInput!]
  title: String!
  venueId: ID
}

input CreateGoedatumInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateOrderInput {
  item: OrderCategory!
  itemId: [String!]!
  payment: CreatePaymentInput
  total: Int!
}

input CreateOrganizerInput {
  email: String!
  event: [CreateEventInput!]
  fullname: String
  password: String!
  role: Role!
  userId: String!
  username: String!
  venue: [CreateVenueInput!]
}

input CreatePaymentInput {
  amount: Int!
  orderId: String!
  status: Status!
}

input CreateSessionInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateTicketInput {
  eventId: String!
  isUsed: Boolean!
  qrcode: String!
  typeId: String!
}

input CreateTickettypeInput {
  eventId: String!
  name: Name!
  price: Int!
  ticket: [CreateTicketInput!]
}

input CreateUserInput {
  admin: CreateAdminInput
  audience: CreateAudienceInput
  email: String!
  organizer: CreateOrganizerInput
  password: String!
}

input CreateVenueInput {
  address: String!
  capacity: Int!
  city: String!
  country: String!
  event: [CreateEventInput!]
  name: String!
  organizer: [CreateOrganizerInput!]
  state: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  category: EventCategory!
  description: String!
  endTime: DateTime!
  id: ID!
  organizer: Organizer!
  organizerId: ID!
  startTime: DateTime!
  ticket: [Ticket!]!
  ticketType: [TicketType!]!
  title: String!
  venue: Venue!
  venueId: ID!
}

"""All categoryies of the event"""
enum EventCategory {
  MUSIC
  SPORT
  TECH
}

type GeoData {
  city: String!
  country: String!
  id: ID!
  region: String!
  timezone: String!
  user: User!
  userId: String!
}

type Mutation {
  createAdmin(createAdminInput: CreateAdminInput!): Admin!
  createAudience(createAudienceInput: CreateAudienceInput!): Audience!
  createEvent(createEventInput: CreateEventInput!): Event!
  createGoedatum(createGoedatumInput: CreateGoedatumInput!): GeoData!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  createOrganizer(createOrganizerInput: CreateOrganizerInput!): Organizer!
  createPayment(createPaymentInput: CreatePaymentInput!): Payment!
  createSession(createSessionInput: CreateSessionInput!): Session!
  createTicket(createTicketInput: CreateTicketInput!): Ticket!
  createTickettype(createTickettypeInput: CreateTickettypeInput!): TicketType!
  createUser(createUserInput: CreateUserInput!): User!
  createVenue(createVenueInput: CreateVenueInput!): Venue!
  removeAdmin(id: String!): Admin!
  removeAudience(id: String!): Audience!
  removeEvent(id: String!): Event!
  removeGoedatum(id: Int!): GeoData!
  removeOrder(id: String!): Order!
  removeOrganizer(id: String!): Organizer!
  removePayment(id: String!): Payment!
  removeSession(id: Int!): Session!
  removeTicket(id: String!): Ticket!
  removeTickettype(id: String!): TicketType!
  removeUser(id: String!): User!
  removeVenue(id: String!): Venue!
  updateAdmin(updateAdminInput: UpdateAdminInput!): Admin!
  updateAudience(updateAudienceInput: UpdateAudienceInput!): Audience!
  updateEvent(updateEventInput: UpdateEventInput!): Event!
  updateGoedatum(updateGoedatumInput: UpdateGoedatumInput!): GeoData!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  updateOrganizer(updateOrganizerInput: UpdateOrganizerInput!): Organizer!
  updatePayment(updatePaymentInput: UpdatePaymentInput!): Payment!
  updateSession(updateSessionInput: UpdateSessionInput!): Session!
  updateTicket(updateTicketInput: UpdateTicketInput!): Ticket!
  updateTickettype(updateTickettypeInput: UpdateTickettypeInput!): TicketType!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateVenue(updateVenueInput: UpdateVenueInput!): Venue!
}

"""Names of all the ticket tiers"""
enum Name {
  REGULAR
  STUDENT
  VIP
  VVIP
}

type Order {
  id: ID!
  item: OrderCategory!
  itemId: [String!]!
  payment: Payment!
  total: Int!
}

"""Category of the order, e.g(ticket, merch)"""
enum OrderCategory {
  MERCH
  TICKET
}

type Organizer {
  event: [Event!]!
  fullname: String
  id: String
  role: Role
  user: User!
  userId: ID
  username: String
  venue: [Venue!]!
}

type Payment {
  amount: Int!
  id: ID!
  order: Order!
  orderId: String!
  paidAt: DateTime!
  status: Status!
}

type Query {
  admin(id: String!): Admin!
  admins: [Admin!]!
  audience(id: String!): Audience!
  audiences: [Audience!]!
  event(id: String!): Event!
  events: [Event!]!
  goedata: [GeoData!]!
  goedatum(id: Int!): GeoData!
  order(id: String!): Order!
  orders: [Order!]!
  organizer(id: String!): Organizer!
  organizers: [Organizer!]!
  payment(id: String!): Payment!
  payments: [Payment!]!
  session(id: Int!): Session!
  ticket(id: String!): Ticket!
  tickets: [Ticket!]!
  tickettype(id: String!): TicketType!
  tickettypes: [TicketType!]!
  user(id: String!): User!
  users: [User!]!
  venue(id: String!): Venue!
  venues: [Venue!]!
}

"""Role assigned to the user"""
enum Role {
  ADMIN
  AUDIENCE
  ORGANIZER
}

type Session {
  createdAt: DateTime!
  id: ID!
  rememberToken: String
  updatedAt: DateTime!
  user: User!
  userId: String!
}

"""Status of the order"""
enum Status {
  FAILED
  PENDING
  SUCCESSFUL
}

type Ticket {
  audience: Audience!
  audienceId: String
  event: Event!
  eventId: String
  id: ID!
  isUsed: Boolean!
  qrcode: String!
  type: TicketType!
  typeId: String!
}

type TicketType {
  event: Event!
  eventId: String
  id: ID!
  name: Name!
  price: Int!
  ticket: [Ticket!]!
}

input UpdateAdminInput {
  email: String
  fullname: String
  id: ID!
  password: String
  role: Role
  userId: String
  username: String
}

input UpdateAudienceInput {
  email: String
  fullname: String
  id: ID!
  password: String
  role: Role
  userId: ID
  username: String
}

input UpdateEventInput {
  category: EventCategory
  description: String
  endTime: DateTime
  id: String!
  organizer: CreateOrganizerInput
  organizerId: String
  startTime: DateTime
  ticket: [CreateTicketInput!]
  ticketType: [CreateTickettypeInput!]
  title: String
  venueId: ID
}

input UpdateGoedatumInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateOrderInput {
  id: String!
  item: OrderCategory
  itemId: [String!]
  payment: CreatePaymentInput
  total: Int
}

input UpdateOrganizerInput {
  email: String
  event: [CreateEventInput!]
  fullname: String
  id: ID!
  password: String
  role: Role
  userId: String
  username: String
  venue: [CreateVenueInput!]
}

input UpdatePaymentInput {
  amount: Int
  id: ID!
  orderId: String
  status: Status
}

input UpdateSessionInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateTicketInput {
  eventId: String
  id: ID!
  isUsed: Boolean
  qrcode: String
  typeId: String
}

input UpdateTickettypeInput {
  eventId: String
  id: ID!
  name: Name
  price: Int
  ticket: [CreateTicketInput!]
}

input UpdateUserInput {
  admin: CreateAdminInput
  audience: CreateAudienceInput
  email: String
  id: ID!
  organizer: CreateOrganizerInput
  password: String
}

input UpdateVenueInput {
  address: String
  capacity: Int
  city: String
  country: String
  event: [CreateEventInput!]
  id: ID!
  name: String
  organizer: [CreateOrganizerInput!]
  state: String
}

type User {
  admin: Admin!
  audience: Audience!
  createdAt: DateTime!
  email: String!
  emailVerified: Boolean!
  geoData: GeoData
  id: ID!
  lastKnownDevice: String
  lastLoginIp: String
  organizer: Organizer!
  provider: String!
  session: [Session!]!
  speakeasySecret: String
  twofaVerified: Boolean!
  updatedAt: DateTime!
  verificationToken: String
}

type Venue {
  address: String!
  capacity: Int!
  city: String!
  country: String!
  createdAt: DateTime!
  event: [Event!]!
  id: ID!
  name: String!
  organizer: [Organizer!]!
  state: String!
  updatedAt: DateTime!
}